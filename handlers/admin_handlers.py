import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from datetime import datetime

from config import ADMIN_IDS, States
from keyboards import (
    create_admin_keyboard,
    create_order_status_keyboard,
    create_back_to_admin_keyboard,
    create_order_list_keyboard
)
from database import db

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def sync_admins():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏–∑ config.py —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    for admin_id in ADMIN_IDS:
        if admin_id not in db.admins:
            db.admins.append(admin_id)
    db.save()

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
sync_admins()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not db.is_admin(message.from_user.id):
        return  # –ü–æ–ª–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
        await message.delete()
    except:
        pass
        
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é
        await message.answer(
            "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=create_admin_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@router.callback_query(F.data.startswith("admin_all_orders"))
async def admin_all_orders(callback: CallbackQuery):
    await show_admin_orders_page(callback, 1)

async def show_admin_orders_page(callback: CallbackQuery, page: int):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    orders_data = db.get_all_orders_paginated(page)
    
    if not orders_data["orders"]:
        await callback.answer("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=True)
        return
    
    text = f"üìã –í—Å–µ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {orders_data['pages']}):\n\n"
    for order in orders_data["orders"]:
        user = db.users.get(str(order["user_id"]), {})
        status_emoji = {
            "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üü°",
            "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏": "üü†",
            "–≤ —Ä–∞–±–æ—Ç–µ": "üîµ",
            "–≤—ã–ø–æ–ª–Ω–µ–Ω": "üü¢",
            "–æ—Ç–º–µ–Ω—ë–Ω": "üî¥"
        }.get(order["status"], "‚ö™Ô∏è")
        
        created_at = datetime.fromisoformat(order["created_at"]).strftime("%d.%m.%Y %H:%M")
        
        text += (
            f"üÜî –ó–∞–∫–∞–∑: {order['id']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', 'N/A')} (ID: {order['user_id']})\n"
            f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
            f"üíé –í–∞–ª—é—Ç–∞: {order['currency']} - {order['amount']}‚ÇΩ\n"
            f"üí≥ –ú–µ—Ç–æ–¥: {order.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –î–∞—Ç–∞: {created_at}\n"            
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
        )
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await callback.message.edit_text(
        text=text,
        reply_markup=create_order_list_keyboard(
            orders_data["orders"],
            orders_data["page"],
            orders_data["pages"],
            is_admin=True
        )
    )

@router.callback_query(F.data.startswith("admin_orders_page_"))
async def handle_admin_orders_pagination(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        page = int(callback.data.split("_")[-1])
        await show_admin_orders_page(callback, page)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)


@router.callback_query(F.data.startswith("admin_order_detail_"))
async def admin_show_order_detail(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    order_id = callback.data.split("_")[-1]
    order = db.orders.get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user = db.users.get(str(order["user_id"]), {})
    status_emoji = {
        "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üü°",
        "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏": "üü†",
        "–≤ —Ä–∞–±–æ—Ç–µ": "üîµ",
        "–≤—ã–ø–æ–ª–Ω–µ–Ω": "üü¢",
        "–æ—Ç–º–µ–Ω—ë–Ω": "üî¥"
    }.get(order["status"], "‚ö™Ô∏è")
    
    created_at = datetime.fromisoformat(order["created_at"]).strftime("%d.%m.%Y %H:%M")
    updated_at = datetime.fromisoformat(order["updated_at"]).strftime("%d.%m.%Y %H:%M")
    
    text = (
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order['id']}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', 'N/A')} (ID: {order['user_id']})\n"
        f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
        f"üíé –í–∞–ª—é—Ç–∞: {order['currency']}\n"
        f"üí∞ –°—É–º–º–∞: {order['amount']}‚ÇΩ\n"
        f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: {order['game_id']}\n"
        f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {order.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {updated_at}\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"admin_status_work_{order_id}"),
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"admin_status_done_{order_id}"),
            ],
            [
                InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_page_1")
            ]
        ])
    )

@router.callback_query(F.data.startswith("admin_status_"))
async def admin_change_order_status(callback: CallbackQuery):
    if not db.is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if callback.data.startswith("admin_status_work_"):
        order_id = callback.data[18:]
        new_status = "–≤ —Ä–∞–±–æ—Ç–µ"
        status_text = "–≤ —Ä–∞–±–æ—Ç—É"
    elif callback.data.startswith("admin_status_done_"):
        order_id = callback.data[18:]
        new_status = "–≤—ã–ø–æ–ª–Ω–µ–Ω"
        status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω"
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if not db.update_order_status(order_id, new_status):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        return
    
    order = db.orders.get(order_id)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            chat_id=order["user_id"],
            text=f"üîÑ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'\n\n"
                 f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
                 f"üíé –í–∞–ª—é—Ç–∞: {order['currency']}\n"
                 f"üí∞ –°—É–º–º–∞: {order['amount']}‚ÇΩ\n\n"
                 f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    else:
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    await admin_show_order_detail(callback)

@router.callback_query(F.data.startswith("status_"))
async def change_order_status(callback: CallbackQuery):
    if callback.data.startswith("status_work_"):
        order_id = callback.data[12:]
        if db.update_order_status(order_id, "–≤ —Ä–∞–±–æ—Ç–µ"):
            await callback.message.edit_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ'",
                reply_markup=create_back_to_admin_keyboard()
            )
    elif callback.data.startswith("status_done_"):
        order_id = callback.data[12:]
        if db.update_order_status(order_id, "–≤—ã–ø–æ–ª–Ω–µ–Ω"):
            await callback.message.edit_text(
                f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–≤—ã–ø–æ–ª–Ω–µ–Ω'",
                reply_markup=create_back_to_admin_keyboard()
            )

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
        ])
    )
    await state.set_state(States.AWAITING_BROADCAST)

@router.message(StateFilter(States.AWAITING_BROADCAST))
async def admin_broadcast_send(message: Message, state: FSMContext, bot):
    users = db.users.keys()
    success = 0
    failed = 0
    
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=int(user_id),
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            )
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
            failed += 1
    
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()

@router.callback_query(F.data == "admin_message_user")
async def admin_message_user_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
        ])
    )
    await state.set_state(States.AWAITING_USER_MESSAGE)

@router.message(StateFilter(States.AWAITING_USER_MESSAGE))
async def admin_message_user_get_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(target_user_id=user_id)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
            ])
        )
        await state.set_state("awaiting_user_message_text")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(StateFilter("awaiting_user_message_text"))
async def admin_message_user_send(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        await state.clear()
        return
    
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    await state.clear()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=create_admin_keyboard()
    )