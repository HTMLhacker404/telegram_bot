from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from datetime import datetime

from config import GAMES, States, TON_WALLET, BANK_DETAILS, TON_API_URL, USDT_WALLET, USDT_API_URL
from keyboards import (
    create_game_keyboard,
    create_currency_keyboard,
    create_confirmation_keyboard,
    create_payment_keyboard,
    create_ton_payment_keyboard,
    create_bank_payment_keyboard,
    create_order_status_keyboard,
    create_order_list_keyboard,
    create_usdt_payment_keyboard
)
from database import db
import requests
import logging

router = Router()

async def get_ton_rate() -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é"""
    try:
        response = requests.get(TON_API_URL)
        response.raise_for_status()
        data = response.json()
        return data["the-open-network"]["rub"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON: {e}")
        return 235.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def get_usdt_rate() -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é"""
    try:
        response = requests.get(USDT_API_URL)
        response.raise_for_status()
        data = response.json()
        return data["tether"]["rub"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT: {e}")
        return 81.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    user = message.from_user
    db.add_user(user.id, user.username or "", user.first_name or "")
    await message.answer(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã!",
        reply_markup=create_game_keyboard()
    )
    await state.set_state(States.SELECT_GAME)

@router.callback_query(F.data == "back_to_games", StateFilter(States.SELECT_CURRENCY))
async def back_to_games(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=create_game_keyboard()
    )
    await state.set_state(States.SELECT_GAME)

@router.callback_query(F.data.startswith("game_"), StateFilter(States.SELECT_GAME))
async def select_game(callback: CallbackQuery, state: FSMContext):
    game = callback.data.split("_")[1]
    await state.update_data(game=game)
    await callback.message.edit_text(
        f"üéÆ –ò–≥—Ä–∞: {game}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã:",
        reply_markup=create_currency_keyboard(game)
    )
    await state.set_state(States.SELECT_CURRENCY)

@router.callback_query(F.data.startswith("currency_"), StateFilter(States.SELECT_CURRENCY))
async def select_currency(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    data = await state.get_data()
    game = data["game"]
    currency, price = list(GAMES[game].items())[idx]
    
    await state.update_data(currency=currency, price=price)
    await callback.message.edit_text(
        f"üéÆ –ò–≥—Ä–∞: {game}\nüíé –í–∞–ª—é—Ç–∞: {currency} - {price}‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID:"
    )
    await state.set_state(States.ENTER_GAME_ID)

@router.message(StateFilter(States.ENTER_GAME_ID))
async def enter_game_id(message: Message, state: FSMContext):
    game_id = message.text.strip()
    if not game_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π ID")
        return
    
    data = await state.get_data()
    game = data["game"]
    currency = data["currency"]
    price = data["price"]
    
    await state.update_data(game_id=game_id)
    await message.answer(
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üéÆ –ò–≥—Ä–∞: {game}\n"
        f"üíé –í–∞–ª—é—Ç–∞: {currency}\n"
        f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n"
        f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: {game_id}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=create_confirmation_keyboard()
    )
    await state.set_state(States.CONFIRM_ORDER)

@router.callback_query(F.data == "confirm_no", StateFilter(States.CONFIRM_ORDER))
async def confirm_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=create_game_keyboard()
    )
    await state.set_data({})
    await state.set_state(States.SELECT_GAME)

@router.callback_query(F.data == "confirm_yes", StateFilter(States.CONFIRM_ORDER))
async def confirm_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order = db.add_order(
        user_id=callback.from_user.id,
        game=data["game"],
        currency=data["currency"],
        amount=data["price"],
        game_id=data["game_id"],
        payment_method=None  # –ü–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
    )
    
    await state.update_data(order_id=order["id"])
    await callback.message.edit_text(
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {data['price']}‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=create_payment_keyboard()
    )
    await state.set_state(States.PAYMENT)

@router.callback_query(F.data == "payment_ton", StateFilter(States.PAYMENT))
async def payment_ton(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ton_rate = await get_ton_rate()
    ton_amount = data['price'] / ton_rate
    
    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON\n\n"
        f"–°—É–º–º–∞: {data['price']}‚ÇΩ (~{ton_amount:.2f} TON)\n"
        f"–ö—É—Ä—Å: 1 TON = {ton_rate:.2f}‚ÇΩ\n"
        f"–ö–æ—à–µ–ª–µ–∫: {TON_WALLET}\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ @wallet –≤ Telegram\n"
        "2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É\n"
        "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
        f"ID –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {data['order_id']}",
        reply_markup=create_ton_payment_keyboard(data['order_id'])
    )

@router.callback_query(F.data == "payment_usdt", StateFilter(States.PAYMENT))
async def payment_usdt(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    usdt_rate = await get_usdt_rate()
    usdt_amount = data['price'] / usdt_rate
    
    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ USDT (TRC20)\n\n"
        f"–°—É–º–º–∞: {data['price']}‚ÇΩ (~{usdt_amount:.2f} USDT)\n"
        f"–ö—É—Ä—Å: 1 USDT = {usdt_rate:.2f}‚ÇΩ\n"
        f"–ö–æ—à–µ–ª–µ–∫: {USDT_WALLET}\n\n"
        "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
        f"ID –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {data['order_id']}",
        reply_markup=create_usdt_payment_keyboard(data['order_id'])
    )

@router.callback_query(F.data == "payment_bank", StateFilter(States.PAYMENT))
async def payment_bank(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(
        f"üè¶ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n\n"
        f"–°—É–º–º–∞: {data['price']}‚ÇΩ\n"
        f"{BANK_DETAILS}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
        f"ID –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {data['order_id']}",
        reply_markup=create_bank_payment_keyboard(data['order_id'])
    )

@router.callback_query(F.data.startswith("paid_"))
async def paid(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤"""
    try:
        bot = callback.bot
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
        
        payment_type = parts[1]  # ton, usdt –∏–ª–∏ bank
        order_id = parts[2]
        
        payment_method = {
            "ton": "TON",
            "usdt": "USDT",
            "bank": "–ë–∞–Ω–∫"
        }.get(payment_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        if not db.update_order(order_id, {
            "status": "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "payment_method": payment_method,
            "updated_at": datetime.now().isoformat()
        }):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order = db.orders.get(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        user = db.users.get(str(order["user_id"]), {})
        created_at = datetime.fromisoformat(order["created_at"]).strftime("%d.%m.%Y %H:%M")
        
        text = (
            "üõí –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üÜî ID –∑–∞–∫–∞–∑–∞: {order['id']}\n"
            f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
            f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
            f"üíé –í–∞–ª—é—Ç–∞: {order['currency']}\n"
            f"üí∞ –°—É–º–º–∞: {order['amount']}‚ÇΩ\n"
            f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: {order['game_id']}\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user.get('username', 'N/A')}\n"
            f"üìÖ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {created_at}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        for admin_id in db.admins:
            try:
                await bot.send_message(
                    chat_id=admin_id, 
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"admin_status_work_{order_id}"),
                            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"admin_status_done_{order_id}"),
                        ]
                    ])
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–æ–º–∞–Ω–¥–æ–π /myorders"
        )
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@router.callback_query(F.data == "cancel_order", StateFilter(States.PAYMENT))
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if "order_id" in data:
        db.update_order_status(data["order_id"], "–æ—Ç–º–µ–Ω—ë–Ω")
    
    await callback.message.edit_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=create_game_keyboard()
    )
    await state.clear()
    await state.set_state(States.SELECT_GAME)

@router.message(Command("myorders"))
async def my_orders(message: Message, state: FSMContext):
    await show_orders_page(message, message.from_user.id, 1)

async def show_orders_page(message: Message, user_id: int, page: int):
    orders_data = db.get_user_orders_paginated(user_id, page)
    
    if not orders_data["orders"]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    text = f"üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {orders_data['pages']}):\n\n"
    for order in orders_data["orders"]:
        status_emoji = {
            "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üü°",
            "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏": "üü†",
            "–≤ —Ä–∞–±–æ—Ç–µ": "üîµ",
            "–≤—ã–ø–æ–ª–Ω–µ–Ω": "üü¢",
            "–æ—Ç–º–µ–Ω—ë–Ω": "üî¥"
        }.get(order["status"], "‚ö™Ô∏è")
        
        created_at = datetime.fromisoformat(order["created_at"]).strftime("%d.%m.%Y %H:%M")
        
        text += (
            f"üÜî ID –∑–∞–∫–∞–∑–∞: {order['id']}\n"
            f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
            f"üíé –í–∞–ª—é—Ç–∞: {order['currency']} - {order['amount']}‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞: {created_at}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
        )
    
    await message.answer(
        text,
        reply_markup=create_order_list_keyboard(
            orders_data["orders"],
            orders_data["page"],
            orders_data["pages"]
        )
    )

@router.callback_query(F.data.startswith("orders_page_"))
async def handle_orders_pagination(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await callback.message.delete()
    await show_orders_page(callback.message, callback.from_user.id, page)

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã!",
        reply_markup=create_game_keyboard()
    )
    await state.set_state(States.SELECT_GAME)

@router.callback_query(F.data.startswith("order_detail_"))
async def show_order_detail(callback: CallbackQuery):
    order_id = callback.data.split("_")[-1]
    order = db.orders.get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_emoji = {
        "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üü°",
        "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏": "üü†",
        "–≤ —Ä–∞–±–æ—Ç–µ": "üîµ",
        "–≤—ã–ø–æ–ª–Ω–µ–Ω": "üü¢",
        "–æ—Ç–º–µ–Ω—ë–Ω": "üî¥"
    }.get(order["status"], "‚ö™Ô∏è")
    
    created_at = datetime.fromisoformat(order["created_at"]).strftime("%d.%m.%Y %H:%M")
    updated_at = datetime.fromisoformat(order["updated_at"]).strftime("%d.%m.%Y %H:%M")
    
    text = (
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order['id']}\n\n"
        f"üéÆ –ò–≥—Ä–∞: {order['game']}\n"
        f"üíé –í–∞–ª—é—Ç–∞: {order['currency']}\n"
        f"üí∞ –°—É–º–º–∞: {order['amount']}‚ÇΩ\n"
        f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {order.get('payment_method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: {order['game_id']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {updated_at}\n"
        f"{status_emoji} –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="orders_page_1")]
        ])
    )

